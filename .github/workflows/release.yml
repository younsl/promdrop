name: Release
run-name: Release promdrop ${{ github.ref_name }}

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:
    inputs:
      version:
        description: "Semantic version to release (e.g. 1.2.0)"
        required: true
        default: "x.y.z"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  VERSION: ${{ github.ref_name || inputs.version }}

jobs:
  build-binaries:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Build binary
        run: |
          echo "Build promdrop-${{ matrix.goos }}-${{ matrix.goarch }} binary ..."
          make build-platform \
            GOOS=${{ matrix.goos }} \
            GOARCH=${{ matrix.goarch }} \
            VERSION=${{ env.VERSION }} \
            COMMIT=${{ github.sha }}

      - name: Create archive
        run: |
          cd dist
          BINARY_NAME="promdrop-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ -f "${BINARY_NAME}" ]; then
            tar -czf "${BINARY_NAME}.tar.gz" "${BINARY_NAME}"
            echo "Created: ${BINARY_NAME}.tar.gz"
          else
            echo "Error: Binary ${BINARY_NAME} not found"
            exit 1
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: promdrop-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*.tar.gz

  build-docker:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        env:
          IMAGE_DESCRIPTION: "A CLI tool to generate prometheus metric-drop config for each prometheus job"
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ env.VERSION }}
            COMMIT=${{ github.sha }}
          outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=${{ env.IMAGE_DESCRIPTION }}

  release:
    runs-on: ubuntu-24.04
    needs: [build-binaries, build-docker]
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find dist -name "*.tar.gz" | while read file; do
            cp "$file" release-assets/
          done
          echo "Release assets:"
          ls -la release-assets/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          name: promdrop ${{ env.VERSION }}
          body: |
            [promdrop](https://github.com/younsl/promdrop) is a CLI tool to generate prometheus metric-drop config for each prometheus job.

            ## Installation

            promdrop can be installed using Go binary or container image with cross-platform support.

            ### Binary Installation

            Download the appropriate binary for your platform:

            | # | platform | architecture | binary |
            | --- | --- | --- | --- |
            | 1 | linux | amd64 | `promdrop-linux-amd64.tar.gz` |
            | 2 | linux | arm64 | `promdrop-linux-arm64.tar.gz` |
            | 3 | darwin | amd64 | `promdrop-darwin-amd64.tar.gz` |
            | 4 | darwin | arm64 | `promdrop-darwin-arm64.tar.gz` |

            Installation procedure for your platform dynamically:

            ```bash
            # Get arch and os currently running on the machine
            ARCH=$(arch)
            OS=$(uname -s | tr '[:upper:]' '[:lower:]')

            curl -LO https://github.com/${{ github.repository }}/releases/download/${{ env.VERSION }}/promdrop-${OS}-${ARCH}.tar.gz
            tar -xzf promdrop-${OS}-${ARCH}.tar.gz
            chmod +x promdrop-${OS}-${ARCH}
            sudo mv promdrop-${OS}-${ARCH} /usr/local/bin/promdrop
            ```
            
            ### Container Image

            promdrop is available as a container image on [GitHub Container Registry](https://github.com/users/younsl/packages/container/package/promdrop) with cross-platform support.

            ```bash
            docker pull ghcr.io/${{ github.repository }}:${{ env.VERSION }}
            docker run --name promdrop --rm ghcr.io/${{ github.repository }}:${{ env.VERSION }} --help
            ```
          generate_release_notes: true
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}